/** @defgroup PluginKit PluginKit
    @brief The PluginKit library exposes a C API, with header-only C++ wrappers, to write plugins for the framework.

    All core functionality that can be accessed through the C++ API is possible to access through the C API as well. However, the C++ wrappers improve the usability of the interface and provide a safer development style. They can also greatly simplify your code and reduce the amount of "boilerplate" needed.

    The C++ wrappers do require some version of the Boost headers to be available. For Windows, the [official binaries](http://sourceforge.net/projects/boost/files/boost-binaries/) are recommended.

    See examples:
    - Comprehensive (auto-detects hardware and creates device): com_osvr_example_DummyDetectAndCreateAsync.cpp
    - com_osvr_example_AnalogSync.cpp
    - com_osvr_example_EyeTracker.cpp
    - com_osvr_example_MultipleAsync.cpp
    - com_osvr_VideoCapture_OpenCV.cpp - not strictly an example, but an actual functioning plugin using OpenCV to supply images.
*/

/** @defgroup ClientKit ClientKit
    @brief The ClientKit library exposes a C API, with header-only C++ wrappers, to write applications using the framework.

    Just as with @ref PluginKit, when possible, the C++ wrappers are recommended.

    The C++ wrappers do require some version of the Boost headers to be available. For Windows, the [official binaries](http://sourceforge.net/projects/boost/files/boost-binaries/) are recommended.

    See examples:

    - C++ wrapper-using:
        - MinimalInit.cpp
        - TrackerCallback.cpp
        - TrackerState.cpp
        - AnalogCallback.cpp
        - ButtonCallback.cpp
        - DisplayParameter.cpp
        - EyeTracker.cpp
        - Imaging.cpp
        - Location2D.cpp
        - ViewerEyeSurfaces.cpp
        - OpenGLSample.cpp
    - C-only:
        - MinimalInit.c
        - TrackerCallback.c
        - TrackerState.c
        - AnalogCallback.c
        - ButtonCallback.c
        - DisplayParameter.c
        - ViewerEyeSurfaces.c
        - OpenGLSampleCAPI.cpp - in C++ but uses the display C API.

*/

/** @defgroup ClientKitCPP C++ wrappers for ClientKit
    @brief The header-only C++ wrappers around the ClientKit C API.
    @ingroup ClientKit
*/

/** @defgroup InternalAPI Internal APIs
    @brief APIs that are used by neither plugin developers nor client application developers.
*/

/** @defgroup PluginHost PluginHost
    @brief Implements registration-related functionality used by @ref PluginKit and provides for loading and unloading plugins.
    @ingroup InternalAPI
*/

/** @defgroup Connection Connection
    @brief Messaging transport and device communication
    @ingroup InternalAPI
*/

/** @defgroup Server Server
    @brief Combining Connection with PluginHost and adding a run-loop in a thread.
    @ingroup InternalAPI
*/

/** @defgroup VRPNServer VRPNServer
    @brief Providing a convenient (C++) interface for writing device plugins directly using VRPN instead of PluginKit.
    @ingroup InternalAPI
*/

/** @defgroup Client Client
    @brief Provides functionality for device access and path routing used by @ref ClientKit
    @ingroup InternalAPI
*/

/** @defgroup Common Common
    @brief Shared code between client and server/plugins, including infrastructure for the path tree, aliases, and the routing graph.
    @ingroup InternalAPI
*/

/** @defgroup Util Utility library
    @brief Includes base definitions/typedefs, some C functionality, some header-only C++ functionality, and some compiled C++ functionality.
*/

/** @defgroup UtilMath Math data structures
    @brief Basic structures and conversion utilities for common math entites.
    @ingroup Util

    This is not intended to be a full math library. It is expected that you convert the values in these structures into your own math types. If you do not yet have a math library, [Eigen](http://eigen.tuxfamily.net) is highly recommended.
*/
